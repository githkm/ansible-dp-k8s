- name: "检查服务端版本"
  command: "kubectl version --client=false --short | grep Server"
  register: server_version
- name: "判断版本是否需要升级"
  assert:
    that: "server_version.stdout.split(' ')[-1] is version('v{{ kubernetes_version }}', '<')"
    fail_msg: "节点无需升级，候选升级版本：'v{{ kubernetes_version }}'，当前服务端版本：{{ server_version.stdout.split(' ')[-1] }} "
    success_msg: "节点需要升级，候选升级版本：'v{{ kubernetes_version }}'，当前服务端版本：{{ server_version.stdout.split(' ')[-1] }}"
- name: "获取集群domain设置"
  shell: "kubectl get cm/kubeadm-config -n kube-system -o jsonpath='{.data}' | grep dnsDomain"
  register: domain_info
- name: "获取集群容器网段设置"
  shell: "kubectl get cm/kubeadm-config -n kube-system -o jsonpath='{.data}' | grep podSubnet"
  register: pod_subnet_info
- name: "获取集群服务设置"
  shell: "kubectl get cm/kubeadm-config -n kube-system -o jsonpath='{.data}' | grep serviceSubnet"
  register: service_subnet_info
- name: "获取集群服务端口段"
  shell: "kubectl get cm/kubeadm-config -n kube-system -o jsonpath='{.data}' | grep service-node-port-range"
  register: node_port_range_info
- name: "判断信息获取是否成功"
  assert:
    that: "domain_info.stdout.split(' ')[-1] != '' and pod_subnet_info.stdout.split(' ')[-1] != '' and service_subnet_info.stdout.split(' ')[-1] != '' and node_port_range_info.stdout.split(' ')[-1] != ''"
    fail_msg: "集群信息获取失败，停止升级"
    success_msg: "集群信息获取成功，domain: {{ domain_info.stdout.split(' ')[-1] }}, 容器组网段：{{ pod_subnet_info.stdout.split(' ')[-1] }}， 服务网段：{{ service_subnet_info.stdout.split(' ')[-1] }}，服务端口段：{{ node_port_range_info.stdout.split(' ')[-1] }}"
- name: "设置集群信息常量"
  set_fact:
    kube_dns_domain: "{{ domain_info.stdout.split(' ')[-1] }}"
    kube_pods_subnet: "{{ pod_subnet_info.stdout.split(' ')[-1] }}"
    kube_service_addresses: "{{ service_subnet_info.stdout.split(' ')[-1] }}"
    kube_apiserver_ip: "{{ service_subnet_info.stdout.split(' ')[-1]|ipaddr('net')|ipaddr(1)|ipaddr('address') }}"
    kube_dns_server: "{{ service_subnet_info.stdout.split(' ')[-1]|ipaddr('net')|ipaddr(10)|ipaddr('address') }}"
    kube_apiserver_node_port_range: "{{ node_port_range_info.stdout.split(' ')[-1] }}"
- name: "下载pause镜像"
  shell: >
    docker pull {{ kube_image_repo }}/pause:3.1 &&
    docker tag {{ kube_image_repo }}/pause:3.1 k8s.gcr.io/pause:3.1
- name: "下载kubernetes安装包"
  get_url:
    url: '{{ kubernetes_url }}'
    dest: /opt
- name: "解压kubernetes安装包"
  unarchive:
    src: '/opt/kubernetes-{{ kubernetes_version }}.tar.gz'
    dest: '/opt'
- name: "注册备份时间"
  command: date +"%Y-%m-%d-%H-%M-%S"
  register: backup_time
- name: "备份配置文件"
  shell: >
    cp -rf /etc/kubeadm/kubeadm.cfg /etc/kubeadm/kubeadm.cfg.{{ backup_time.stdout }} &&
    cp -rf /etc/kubernetes /etc/kubernetes.{{ backup_time.stdout }} &&
    cp -rf /etc/systemd/system/kubelet.service.d/10-kubeadm.conf /etc/systemd/system/kubelet.service.d/10-kubeadm.conf.{{ backup_time.stdout }}
- name: "卸载老版本kubeadm kubectl"
  shell: yum erase -y kubeadm kubectl
- name: "安装kubernetes kubeadm-{{ kubernetes_version }}和kubectl-{{ kubernetes_version }}包"
  shell: 'yum localinstall -y $(ls /opt/pkg/kubernetes/{{ kubernetes_version }}/rpm/ | grep -E "kubeadm|kubectl" | xargs -I "{}" echo -n "/opt/pkg/kubernetes/{{ kubernetes_version }}/rpm/{} ")'
- name: "恢复10-kubeadm.conf配置"
  shell: >
    rm -rf /etc/systemd/system/kubelet.service.d/10-kubeadm.conf &&
    cp -rf /etc/systemd/system/kubelet.service.d/10-kubeadm.conf.{{ backup_time.stdout }} /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
- name: "创建kubeadm配置"
  template:
    src: "kubeadm.{{ kubernetes_version }}.cfg.j2"
    dest: /etc/kubeadm/kubeadm.cfg
- name: "Master镜像下载"
  shell: "kubeadm config images pull --config /etc/kubeadm/kubeadm.cfg"
- name: "测试升级尝试"
  shell: "kubeadm upgrade apply --config /etc/kubeadm/kubeadm.cfg --allow-experimental-upgrades --force --dry-run --ignore-preflight-errors=CoreDNSUnsupportedPlugins"
  ignore_errors: yes 
  register: test_upgrade
- include: master.yml
  when: test_upgrade.stdout.find("successfully") >= 1
